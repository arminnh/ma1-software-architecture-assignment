FOR PROJECT DEFENSE: best is 25/05 - 27/05,
                     24/05 armin exam and monika project deadline

AFTER DEADLINE, BEFORE PROJECT DEFENSE:
    create use case log to print

In decompositions 1, 2, and 3, check decisions important for deployment and add them in rationale

Finish decomposition 8

Find methods that change state but have missing parameters

Broker -> CommunicationHandler: handles communication by remote method invocation
                                still not message queue or pulish subscribe

Av2: up-time => passive replication

P1: ??? => active replication + load balancing? how many new components to handle all of this?

Different notify methods to know the trigger and put in other data maybe. => If no time, put in discussion

In rationale somehwere:
    How is hardware linked to Infrastructure owners?
        => 1 device <-> 1 infrastructure owner
        => when an IO buys/orders hardware, then that hardware is linked to the IO after the order is completed.

==========================================================================
================================ REPORT ==================================
==========================================================================

    1. Architectural Decisions:
        *) Architectural decisions for each QAS
        *) Other decisions
        *) Discussion
    2. Client-server view (UML Component diagram):
        *) The context diagram of the client-server view
        *) The primary diagram
    3. Decomposition view (UML Component diagram)
        Gateway, PluggableDeviceDB, Application execution subsystem
    4. Deployment view (UML Deployment diagram):
        *) The context diagram of the deployment view
        *) The primary diagram
    5. Scenarios:
        *) UC11: Sensor data being processed by the system
        *) UC19: Subscribing to an application
        *) UC12: Applications issuing actuation commands
        *) UC14, Av3, UC18: Sensors/actuators failing, causing
                            (i) deactivation of specic applications,
                            (ii) a redundant sensor/actuator to take over in the context of a single application.
        *) Av2 : Application crash
        *) U2, UC4: Plugging in a new pluggable device (sensor or actuator)
        *) Av1, UC15: Detection and handling of communication channel failure
        *) UC22, U1: Upgrading an application
        *) UC26, UC27, UC12: Sending actuation commands via a mobile app
    6. Element catalog and datatypes:

==========================================================================
================================ QUESTIONS ===============================
==========================================================================

Interfaces: What's the point of exceptions? Do we use them for alternative scenario's? Like "not found exception"
    -> not mandatory, but data flow should be clear for the alternative scenarios in use cases

Package or component in diagram for Gateway, Online Service, ...?
    -> both are ok, both make it clear that we separate the components in groups
    -> components could be used for decomposition diagram

Where to create the actual db queries?
    -> not necessary at this level of abstraction, send the parameters along and make
       it clear what you want from the query. In the actual implementation, the query
       will probably be formed before it reached the DB.

Av2: up time?
P1: for replication of components, do we need to add routing or can we just add this in the rationale?
    => complicated

Av1: Interfaces between brokers?
     => Broker is something else, fuck the book

For report:
    How to rotate page for image in latex?
        => pdflscape => begin{landscape} end{landscape}
        => sideways
    How to make interface names transparent?
        => nobody knows?????????
