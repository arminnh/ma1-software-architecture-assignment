FOR PROJECT DEFENSE: best is 25/05 - 27/05,
                     24/05 armin exam and monika project deadline

Update decomposition 3: Interfaces for child modules
decomposition 3: update DB queries: no Query objects

Check how we used Facade, maybe another pattern is more appropriate, we kind
of use them as request handlers right now.

==========================================================================

QUESTIONS:

Interfaces: What's the point of exceptions? Do we use them for alternative scenario's? Like "not found exception"
    -> if we good designed system then we don't need exceptions
    -> not mandatory, but data flow should be clear for the alternative scenarios in use cases

Package or component in diagram for Gateway, Online Service, ...?
    -> both are ok, both make it clear that we separate the components in groups
    -> components could be used for decomposition diagram

Where to create the actual db queries?
    -> not necessary at this level of abstraction, send the parameters along and make
       it clear what you want from the query. In the actual implementation, the query
       will probably be formed before it reached the DB.

How to make interface names transparent?

Should we denote when methods should be sync/async?

==========================================================================

FOR THE SECTION ON CHANGES WE DID TO THE ADD SYSTEM:

    For component, interfaces, datatypes: we list the new ones, but refer
    to the plugin exported catalog for descriptions

    \section{Decomposition X: DRIVERS (Elements/Subsystem to decompose/expand)}
        Instead of "Element", we do elements or subsystems to decompose/expand.
        The elements/subsystems to decompose/expand are the result
        of the chosen architectural drivers.

    \subsection{Selected architectural drivers}
        \paragraph{Rationale}
            We leave this out, since the rationale is pretty much always the
            same. Of the drivers that are left, we chose the drivers that
            have highest priority assigned to them. Within a class of priority
            we choose the ones that we believe are most important to the core of the
            sytem or that will have the biggest impact on end-users.
            If drivers are grouped, this is because they fulfill similar
            responsibilities or they will force us to think about the design
            of a subsystem as a whole (e.g. Decomposition 2).


    \subsection{Verify and refine}
        \noindent We will not do this step. We chose to handle all chosen architectural
        drivers completely in every decomposition.

==========================================================================

How is hardware linked to Infrastructure owners? Check if this is handled in one of the use cases
1 gateway <-> 1 infrastructure owner
    => our own answer, when an IO buys/orders hardware, then that hardware is linked
       to the IO after the order is completed.

==========================================================================
============================ REMAINING DRIVERS ===========================
==========================================================================

Medium Priority
Av1: Communication between SIoTIP gateway and Online Service
Av2: Application failure
P1: Large number of users

Low Priority, we can skip these
% U1: Application updates
% M2: Big data analytics on pluggable data and/or application usage data

High:
UC05: Uninstall mote
UC07: Remove a pluggable device from its mote
UC08: Initialise a pluggable device
UC12: Perform actuation command
UC19: Subscribe to application
UC20: Unsubscribe from application
UC25: Access topology and available devices
UC26: Send application command or message to external front-end
UC27: Receive application command or message from external front-end

Medium:
UC13: Configure pluggable device
UC22: Upload an application
UC24: Consult historical data
UC28: Log in
UC29: Log out

Low:
UC01: Register a customer organisation
UC02: Register an end-user
UC03: Unregister an end-user
UC16: Consult notification message
UC21: Send invoice
UC23: Consult application statistics
