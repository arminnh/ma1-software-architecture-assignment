FOR PROJECT DEFENSE: best is 25/05 - 27/05,
                     24/05 armin exam and monika project deadline

In all decompositions check decisions important for deployment and add some where we forgot

Need to do this somehwere, in a later use case probably?
    If a pluggable device is 'inactive' (because disconnected), then it is automatically 'unplaced' in the topology, so no need to also explicitly check device status

U2:
    These conversions should be possible per application. For example, one application might be able to only use temperature measurement in degrees Celsius, whereas another application (also) uses degrees Fahrenheit.
    -> Let DeviceDataConverter be used by ApplicationManager or devicedataScheduler, not GatewayFacade

==========================================================================
================================ REPORT ==================================
==========================================================================

    1. Architectural Decisions:
        *) Architectural decisions for each QAS
        *) Other decisions
        *) Discussion
    2. Client-server view (UML Component diagram):
        *) The context diagram of the client-server view
        *) The primary diagram
    3. Decomposition view (UML Component diagram)
        Gateway, PluggableDeviceDB, Application execution subsystem
    4. Deployment view (UML Deployment diagram):
        *) The context diagram of the deployment view
        *) The primary diagram
    5. Scenarios:
        *) UC11: Sensor data being processed by the system
        *) UC19: Subscribing to an application
        *) UC12: Applications issuing actuation commands
        *) UC14, Av3, UC18: Sensors/actuators failing, causing
                            (i) deactivation of specic applications,
                            (ii) a redundant sensor/actuator to take over in the context of a single application.
        *) Av2 : Application crash
        *) U2, UC4: Plugging in a new pluggable device (sensor or actuator)
        *) Av1, UC15: Detection and handling of communication channel failure
        *) UC22, U1: Upgrading an application
        *) UC26, UC27, UC12: Sending actuation commands via a mobile app
    6. Element catalog and datatypes:

==========================================================================
================================== BOOK ==================================
==========================================================================

    76 separating user interfaces
    79 distributing functionality
    130 warehouse topology baseline
    153 summary
    221 messaging
    224 message channel
    237 broker
    246 client request handler
    294 facade
    305 component partioning
    329 application control
    351 authorization
    371 Synchronisation
    394 copied value
    410 mediator
    418 data transfer object
    420 message
    For Av2:
        473 resource management
        488 CONTAINER
        490 component configurator
        492 object manager
        501 task coordinator
        503 resource pool

==========================================================================
================================ QUESTIONS ===============================
==========================================================================

Interfaces: What's the point of exceptions? Do we use them for alternative scenario's? Like "not found exception"
    -> if we good designed system then we don't need exceptions
    -> not mandatory, but data flow should be clear for the alternative scenarios in use cases

Package or component in diagram for Gateway, Online Service, ...?
    -> both are ok, both make it clear that we separate the components in groups
    -> components could be used for decomposition diagram

Where to create the actual db queries?
    -> not necessary at this level of abstraction, send the parameters along and make
       it clear what you want from the query. In the actual implementation, the query
       will probably be formed before it reached the DB.

How to make interface names transparent?

Should we denote when methods should be sync/async?

How is hardware linked to Infrastructure owners?
    => 1 gateway <-> 1 infrastructure owner
    => when an IO buys/orders hardware, then that hardware is linked to the IO after the order is completed.
